---
- name: Stop IIS Application and Backup Files
  hosts: test_server
  vars:
    Nexus_URL: "http://172.16.1.236:8081/service/rest/v1/search/assets/download?sort=version&direction=desc&repository=Space-Reserve&format=maven2&group=Space-Reserve&name=dev_spacereserveservices_user&version=1.0.0"
    site_name: "dev-SpaceReserveServices-User Portal"
    backup_dir: "C:\Backup"
    latest_build_dir: "C:\Latest_Build"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    backup_folder: "{{ backup_dir }}\backup_{{ timestamp }}"

  tasks:

    - name: Check if the IIS Application is running
      win_shell: |
        Import-Module WebAdministration
        (Get-Website -Name "{{ site_name }}").State
      register: app_state

    - name: Stop IIS Application if it is running
      win_shell: |
        Import-Module WebAdministration
        Stop-Website -Name "{{ site_name }}"
      when: app_state.stdout.strip() == "Started"
      register: stop_iis_result
      failed_when: stop_iis_result.rc != 0

    - name: Check if Backup Folder exists
      win_stat:
        path: "{{ backup_folder }}"
      register: backup_folder_status

    - name: Create Backup Folder 
      win_file:
        path: "{{ backup_folder }}"
        state: directory
      when: not backup_folder_status.stat.exists

    - name: Backing up the old files
      win_copy:
        src: "{{ item }}"
        dest: "{{ backup_folder }}"
        remote_src: yes
      with_items:
        - "C:\inetpub\wwwroot\{{ site_name }}\appsettings.Development.json"
        - "C:\inetpub\wwwroot\{{ site_name }}\appsettings.QA.json"
        - "C:\inetpub\wwwroot\{{ site_name }}\appsettings.json"
        - "C:\inetpub\wwwroot\{{ site_name }}\web.config"
      register: backup_files_result
      failed_when: backup_files_result.failed

    - name: Check if logs and runtimes folders exist
      win_stat:
        path: "{{ item }}"
      with_items:
        - "C:\inetpub\wwwroot\{{ site_name }}\logs"
        - "C:\inetpub\wwwroot\{{ site_name }}\runtimes"
      register: folder_status

    - name: Backing up the logs and runtimes folders
      win_copy:
        src: "{{ item.item }}"
        dest: "{{ backup_folder }}"
        recurse: yes
        remote_src: yes
      with_items: "{{ folder_status.results }}"
      when: item.stat.exists
      register: log_runtime_backup_result
      failed_when: log_runtime_backup_result.failed

    - name: Deleting older build
      win_file:
        path: "C:\inetpub\wwwroot\{{ site_name }}"
        state: absent
      failed_when: result.rc != 0

    - name: Check if latest build folder exists
      win_stat:
        path: "{{ latest_build_dir }}"
      register: latest_folder_status

    - name: Create Latest build Folder 
      win_file:
        path: "{{ latest_build_dir }}"
        state: directory
      when: not latest_folder_status.stat.exists

    - name: Downloading from provided Nexus URL
      win_get_url:
        url: "{{ Nexus_URL }}"
        dest: "{{ latest_build_dir }}\latest_build.zip"
      register: download_result
      failed_when: download_result.failed

    - name: Unzipping the artifact file
      win_unzip:
        src: "{{ latest_build_dir }}\latest_build.zip"
        dest: "C:\inetpub\wwwroot\{{ site_name }}\"
        remote_src: yes
      failed_when: result.rc != 0

    - name: Deleting old build files (restoring backup)
      win_file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "C:\inetpub\wwwroot\{{ site_name }}\appsettings.Development.json"
        - "C:\inetpub\wwwroot\{{ site_name }}\appsettings.QA.json"
        - "C:\inetpub\wwwroot\{{ site_name }}\appsettings.json"
        - "C:\inetpub\wwwroot\{{ site_name }}\web.config"
      failed_when: result.rc != 0

    - name: Deleting old logs and runtimes folders
      win_file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "C:\inetpub\wwwroot\{{ site_name }}\logs"
        - "C:\inetpub\wwwroot\{{ site_name }}\runtimes"
        - "C:\inetpub\wwwroot\{{ site_name }}\latest_build.zip"
      failed_when: result.rc != 0

    - name: Copying the backup files into the main published code
      win_copy:
        src: "{{ backup_folder }}\"
        dest: "C:\inetpub\wwwroot\{{ site_name }}\"
        remote_src: yes
      failed_when: result.rc != 0

    - name: Restart the IIS application
      win_shell: |
        Import-Module WebAdministration
        Start-Website -Name "{{ site_name }}"
      register: restart_iis_result
      failed_when: restart_iis_result.rc != 0

    - name: Check if IIS Application restarted successfully
      debug:
        msg: "IIS Application has been restarted successfully."
      when: restart_iis_result.rc == 0